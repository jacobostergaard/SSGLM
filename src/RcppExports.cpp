// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// izhikevich
arma::mat izhikevich(arma::mat V, arma::mat U, arma::mat I, arma::vec pars);
RcppExport SEXP _SSGLM_izhikevich(SEXP VSEXP, SEXP USEXP, SEXP ISEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(izhikevich(V, U, I, pars));
    return rcpp_result_gen;
END_RCPP
}
// log_logistic
arma::vec log_logistic(arma::vec x, double a, double b);
RcppExport SEXP _SSGLM_log_logistic(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(log_logistic(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// rev_vec
arma::vec rev_vec(arma::vec x);
RcppExport SEXP _SSGLM_rev_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rev_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// mpfpp_cpp
arma::mat mpfpp_cpp(arma::sp_mat y, arma::vec x, arma::vec Bb, arma::vec Br, arma::mat Sb, arma::mat Sr, arma::vec xpars, int s_lag_in, double Neffpct, int M, double w0, arma::vec q, double dt, bool usetrue, bool verbose);
RcppExport SEXP _SSGLM_mpfpp_cpp(SEXP ySEXP, SEXP xSEXP, SEXP BbSEXP, SEXP BrSEXP, SEXP SbSEXP, SEXP SrSEXP, SEXP xparsSEXP, SEXP s_lag_inSEXP, SEXP NeffpctSEXP, SEXP MSEXP, SEXP w0SEXP, SEXP qSEXP, SEXP dtSEXP, SEXP usetrueSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bb(BbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Br(BrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sb(SbSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sr(SrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xpars(xparsSEXP);
    Rcpp::traits::input_parameter< int >::type s_lag_in(s_lag_inSEXP);
    Rcpp::traits::input_parameter< double >::type Neffpct(NeffpctSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type w0(w0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type usetrue(usetrueSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mpfpp_cpp(y, x, Bb, Br, Sb, Sr, xpars, s_lag_in, Neffpct, M, w0, q, dt, usetrue, verbose));
    return rcpp_result_gen;
END_RCPP
}
// px_x
arma::vec px_x(arma::vec x, arma::vec pars);
RcppExport SEXP _SSGLM_px_x(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(px_x(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// py_xy
arma::mat py_xy(arma::vec x, arma::vec y, double l0, double l1);
RcppExport SEXP _SSGLM_py_xy(SEXP xSEXP, SEXP ySEXP, SEXP l0SEXP, SEXP l1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    rcpp_result_gen = Rcpp::wrap(py_xy(x, y, l0, l1));
    return rcpp_result_gen;
END_RCPP
}
// resample
arma::uvec resample(arma::vec w);
RcppExport SEXP _SSGLM_resample(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(resample(w));
    return rcpp_result_gen;
END_RCPP
}
// sample_x
arma::vec sample_x(arma::vec x, arma::vec pars);
RcppExport SEXP _SSGLM_sample_x(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_x(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// sim_ssglm
arma::mat sim_ssglm(int nsim, double r0, arma::vec rk, double b0, arma::vec bk, arma::vec xpars, double dt);
RcppExport SEXP _SSGLM_sim_ssglm(SEXP nsimSEXP, SEXP r0SEXP, SEXP rkSEXP, SEXP b0SEXP, SEXP bkSEXP, SEXP xparsSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rk(rkSEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bk(bkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xpars(xparsSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ssglm(nsim, r0, rk, b0, bk, xpars, dt));
    return rcpp_result_gen;
END_RCPP
}
// test
arma::cube test(int p);
RcppExport SEXP _SSGLM_test(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(test(p));
    return rcpp_result_gen;
END_RCPP
}
// test_input
arma::mat test_input(arma::mat y);
RcppExport SEXP _SSGLM_test_input(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_input(y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SSGLM_izhikevich", (DL_FUNC) &_SSGLM_izhikevich, 4},
    {"_SSGLM_log_logistic", (DL_FUNC) &_SSGLM_log_logistic, 3},
    {"_SSGLM_rev_vec", (DL_FUNC) &_SSGLM_rev_vec, 1},
    {"_SSGLM_mpfpp_cpp", (DL_FUNC) &_SSGLM_mpfpp_cpp, 15},
    {"_SSGLM_px_x", (DL_FUNC) &_SSGLM_px_x, 2},
    {"_SSGLM_py_xy", (DL_FUNC) &_SSGLM_py_xy, 4},
    {"_SSGLM_resample", (DL_FUNC) &_SSGLM_resample, 1},
    {"_SSGLM_sample_x", (DL_FUNC) &_SSGLM_sample_x, 2},
    {"_SSGLM_sim_ssglm", (DL_FUNC) &_SSGLM_sim_ssglm, 7},
    {"_SSGLM_test", (DL_FUNC) &_SSGLM_test, 1},
    {"_SSGLM_test_input", (DL_FUNC) &_SSGLM_test_input, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SSGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
